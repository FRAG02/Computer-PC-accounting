{"ast":null,"code":"const __API_PATH = \"http://project-api.local/\";\nconst fetchData = async (url, method = \"GET\", body = null) => {\n  const options = {\n    method\n  };\n  if (body && method !== 'GET') {\n    options.body = JSON.stringify(body); // Преобразуем тело запроса в JSON\n  }\n  let fullUrl = `${__API_PATH}${url}`;\n  if (method === 'GET' && body) {\n    const params = new URLSearchParams(body);\n    fullUrl += `?${params.toString()}`;\n  }\n  const response = await fetch(fullUrl, options);\n  return response.json();\n};\n\n// Метод для авторизации\nexport const login = async (username, password) => fetchData('login', \"POST\", {\n  username,\n  password\n});\n\n// Метод для регистрации\nexport const register = async (username, password) => fetchData('register', \"POST\", {\n  username,\n  password\n});\n\n// Метод для получения подразделений\nexport const getDepartments = setFunc => async () => fetchData('get-departments').then(data => setFunc(data));\n\n// Метод для получения МОЛ\nexport const getMOLs = setFunc => async () => fetchData('get-mols').then(data => setFunc(data));\n\n// Метод для получения оборудования\nexport const getEquipment = setFunc => async () => fetchData('get-equipment').then(data => setFunc(data));","map":{"version":3,"names":["__API_PATH","fetchData","url","method","body","options","JSON","stringify","fullUrl","params","URLSearchParams","toString","response","fetch","json","login","username","password","register","getDepartments","setFunc","then","data","getMOLs","getEquipment"],"sources":["C:/OSPanel/home/project-api.local/frontend/src/services/api.js"],"sourcesContent":["const __API_PATH = \"http://project-api.local/\";\r\n\r\nconst fetchData = async (url, method = \"GET\", body = null) => {\r\n    const options = {\r\n        method\r\n    };\r\n\r\n    if (body && method !== 'GET') {\r\n        options.body = JSON.stringify(body); // Преобразуем тело запроса в JSON\r\n    }\r\n\r\n    let fullUrl = `${__API_PATH}${url}`;\r\n    if (method === 'GET' && body) {\r\n        const params = new URLSearchParams(body);\r\n        fullUrl += `?${params.toString()}`;\r\n    }\r\n\r\n    const response = await fetch(fullUrl, options);\r\n    return response.json();\r\n};\r\n\r\n// Метод для авторизации\r\nexport const login = async (username, password) => fetchData('login', \"POST\", { username, password });\r\n\r\n// Метод для регистрации\r\nexport const register = async (username, password) => fetchData('register', \"POST\", { username, password });\r\n\r\n// Метод для получения подразделений\r\nexport const getDepartments = (setFunc) => async () => fetchData('get-departments').then(data => setFunc(data));\r\n\r\n// Метод для получения МОЛ\r\nexport const getMOLs = (setFunc) => async () => fetchData('get-mols').then(data => setFunc(data));\r\n\r\n// Метод для получения оборудования\r\nexport const getEquipment = (setFunc) => async () => fetchData('get-equipment').then(data => setFunc(data));"],"mappings":"AAAA,MAAMA,UAAU,GAAG,2BAA2B;AAE9C,MAAMC,SAAS,GAAG,MAAAA,CAAOC,GAAG,EAAEC,MAAM,GAAG,KAAK,EAAEC,IAAI,GAAG,IAAI,KAAK;EAC1D,MAAMC,OAAO,GAAG;IACZF;EACJ,CAAC;EAED,IAAIC,IAAI,IAAID,MAAM,KAAK,KAAK,EAAE;IAC1BE,OAAO,CAACD,IAAI,GAAGE,IAAI,CAACC,SAAS,CAACH,IAAI,CAAC,CAAC,CAAC;EACzC;EAEA,IAAII,OAAO,GAAG,GAAGR,UAAU,GAAGE,GAAG,EAAE;EACnC,IAAIC,MAAM,KAAK,KAAK,IAAIC,IAAI,EAAE;IAC1B,MAAMK,MAAM,GAAG,IAAIC,eAAe,CAACN,IAAI,CAAC;IACxCI,OAAO,IAAI,IAAIC,MAAM,CAACE,QAAQ,CAAC,CAAC,EAAE;EACtC;EAEA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACL,OAAO,EAAEH,OAAO,CAAC;EAC9C,OAAOO,QAAQ,CAACE,IAAI,CAAC,CAAC;AAC1B,CAAC;;AAED;AACA,OAAO,MAAMC,KAAK,GAAG,MAAAA,CAAOC,QAAQ,EAAEC,QAAQ,KAAKhB,SAAS,CAAC,OAAO,EAAE,MAAM,EAAE;EAAEe,QAAQ;EAAEC;AAAS,CAAC,CAAC;;AAErG;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOF,QAAQ,EAAEC,QAAQ,KAAKhB,SAAS,CAAC,UAAU,EAAE,MAAM,EAAE;EAAEe,QAAQ;EAAEC;AAAS,CAAC,CAAC;;AAE3G;AACA,OAAO,MAAME,cAAc,GAAIC,OAAO,IAAK,YAAYnB,SAAS,CAAC,iBAAiB,CAAC,CAACoB,IAAI,CAACC,IAAI,IAAIF,OAAO,CAACE,IAAI,CAAC,CAAC;;AAE/G;AACA,OAAO,MAAMC,OAAO,GAAIH,OAAO,IAAK,YAAYnB,SAAS,CAAC,UAAU,CAAC,CAACoB,IAAI,CAACC,IAAI,IAAIF,OAAO,CAACE,IAAI,CAAC,CAAC;;AAEjG;AACA,OAAO,MAAME,YAAY,GAAIJ,OAAO,IAAK,YAAYnB,SAAS,CAAC,eAAe,CAAC,CAACoB,IAAI,CAACC,IAAI,IAAIF,OAAO,CAACE,IAAI,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}